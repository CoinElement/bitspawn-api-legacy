---
swagger: "2.0"
info:
  description: This is an example of using OAuth2 Password Flow in a specification to describe security to your API.
  version: 1.0.0
  title: Sample Password Flow OAuth2 Project
host: virtserver.swaggerhub.com
basePath: /bitspawn/beta/1.0.0
schemes:
  - https
  - http
paths:
  /example:
    get:
      summary: Server example operation
      description: This is an example operation to show how security is applied to the call.
      parameters: []
      responses:
        "200":
          description: OK
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      parameters: []
      responses:
        "200":
          description: OK
      security: []
  /user/signup:
    post:
      summary: create new user
      description: create new user
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/userSignupRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userAuthResponse'
  /user/login:
    put:
      summary: create new user
      description: create new user
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/userSignupRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/userAuthResponse'

  /tournament/create:
    post:
      summary: create new tournament
      description: create new tournament and deploy a payout smart contract
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentCreateRequest'
      responses:
        "200":
          description: OK
  /tournament/register:
    post:
      summary: participate in a tournament
      description: pay the entry fee to participate in tournament
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentRegisterRequest'
      responses:
        "200":
          description: OK
  /tournament/fund:
    post:
      summary: fund a tournament
      description: pay the funds for a tournament to have enough funds for prize allocation
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentFundingRequest'
      responses:
        "200":
          description: OK
  /tournament/start:
    post:
      summary: start a tournament
      description: api for the owner of the tournament to start the tournament
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentAdminRequest'
      responses:
        "200":
          description: OK
  /tournament/cancel:
    post:
      summary: cancel a tournament
      description: api for the owner of the tournament to cancel the tournament
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentAdminRequest'
      responses:
        "200":
          description: OK
  /tournament/complete:
    post:
      summary: complete a tournament
      description: api for the owner of the tournament to complete the tournament
      security:
        - secret_key: []
      parameters:
        - in: body
          name: request
          required: false
          schema:
            $ref: '#/definitions/tournamentCompleteRequest'
      responses:
        "200":
          description: OK
securityDefinitions:
  secret_key:
    type: apiKey
    in: header
    name: X-Auth-Token
definitions:
  tournamentCreateRequest:
    type: object
    properties:
      moniker:
        type: string
        description: |
          humain readable name of tournamet
      entry_fee:
        type: string
        description: |
          participant entry payment in float number of spawn
      price_allocation:
        type: array
        description: |
          prize allocation of the total price pool from 1st to last, the prizes are string of floating point representation of tokens
        items:
          type: string
  tournamentRegisterRequest:
    type: object
    properties:
      tournament_id:
        type: string
        description: |
          the uuid of the tournament to register
      participation_fee:
        type: string
        description: |
          participation fee in bitspawn tokens
  tournamentFundingRequest:
    type: object
    properties:
      tournament_id:
        type: string
        description: |
          the uuid of the tournament to fund
      funds:
        type: string
        description: |
          funds in bitspawn tokens
  tournamentAdminRequest:
    type: object
    properties:
      tournament_id:
        type: string
        description: |
          the uuid of the tournament to administer
  tournamentCompleteRequest:
    type: object
    properties:
      tournament_id:
        type: string
        description: |
          the uuid of the tournament to complete
      final_placements:
        type: array
        description: |
          the address of winners in the order of final placements
        items:
          type: string
  userSignupRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      first_name:
        type: string
      last_name:
        type: string
  userAuthResponse:
    type: object
    properties:
      status:
        type: string
      data:
        type: object
        properties:
          authToken:
            type: string
  response:
    type: object
    properties:
      status:
        type: string
        description: |
          status of the api response in a string success/failure
      msg:
        type: string
        description: |
          accompanying message with the status, mostly an error message